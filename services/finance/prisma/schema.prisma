generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI_FINANCE_SERVICE")
}

enum RequisitionStatus {
  DRAFT
  SUBMITTED
  PENDING_CHANGES
  READY_TO_ORDER
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  CLOSED
  CANCELLED
  READY_FOR_REIMBURSEMENT
  AWAITING_INFORMATION
  REIMBURSEMENT_IN_PROGRESS
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

model Budget {
  id           Int           @id @default(autoincrement())
  name         String
  categories   Category[]
  requisitions Requisition[]
  archived     Boolean       @default(false)

  @@map("budget")
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  budgetId  Int
  budget    Budget     @relation(fields: [budgetId], references: [id])
  lineItems LineItem[]

  @@map("category")
}

model LineItem {
  id               Int               @id @default(autoincrement())
  name             String
  quantity         Int
  unitCost         Float
  categoryId       Int
  category         Category          @relation(fields: [categoryId], references: [id])
  requisitionItems RequisitionItem[]

  @@map("line_item")
}

model OperatingBudget {
  id                 Int                 @id @default(autoincrement())
  month              Month
  year               Int
  operatingLineItems OperatingLineItem[]

  @@map("operating_budget")
}

model OperatingLineItem {
  id                Int             @id @default(autoincrement())
  name              String
  cost              Float
  operatingBudgetId Int
  OperatingBudget   OperatingBudget @relation(fields: [operatingBudgetId], references: [id])

  @@map("operating_line_item")
}

model Approval {
  id            Int         @id @default(autoincrement())
  isApproving   Boolean
  notes         String?
  date          DateTime    @default(now())
  approverId    String
  requisitionId Int
  approver      User        @relation(fields: [approverId], references: [userId])
  requisition   Requisition @relation(fields: [requisitionId], references: [id])

  @@map("approval")
}

model File {
  id            Int         @id @default(autoincrement())
  name          String
  googleName    String      @unique
  isActive      Boolean     @default(true)
  requisitionId Int
  mimetype      String
  requisition   Requisition @relation(fields: [requisitionId], references: [id])

  @@map("file")
}

model Payment {
  id              Int           @id @default(autoincrement())
  amount          Float
  date            String
  fundingSourceId Int
  requisitionId   Int
  fundingSource   PaymentMethod @relation(fields: [fundingSourceId], references: [id])
  requisition     Requisition   @relation(fields: [requisitionId], references: [id])

  @@map("payment")
}

model PaymentMethod {
  id                        Int           @id @default(autoincrement())
  name                      String        @unique
  isActive                  Boolean       @default(true)
  reimbursementInstructions String?
  isDirectPayment           Boolean       @default(false)
  payments                  Payment[]
  requisitions              Requisition[]

  @@map("payment_method")
}

model Project {
  id              Int           @id @default(autoincrement())
  name            String
  archived        Boolean       @default(false)
  shortCode       String
  year            Int
  referenceString String        @unique
  leads           User[]
  requisitions    Requisition[]

  @@map("project")
}

model Requisition {
  id                   Int               @id @default(autoincrement())
  headline             String?
  description          String?
  status               RequisitionStatus @default(DRAFT)
  projectId            Int
  projectRequisitionId Int
  createdById          String
  paymentRequiredBy    String?
  otherFees            Float?
  orderDate            String?
  shippingLocation     String?
  isReimbursement      Boolean           @default(false)
  fundingSourceId      Int?
  budgetId             Int?
  purchaseDate         String?
  referenceString      String            @unique
  budget               Budget?           @relation(fields: [budgetId], references: [id])
  createdBy            User              @relation(fields: [createdById], references: [userId])
  fundingSource        PaymentMethod?    @relation(fields: [fundingSourceId], references: [id])
  project              Project           @relation(fields: [projectId], references: [id])
  approvals            Approval[]
  files                File[]
  payments             Payment[]
  items                RequisitionItem[]

  @@map("requisition")
}

model RequisitionItem {
  id            Int         @id @default(autoincrement())
  name          String?
  quantity      Int?
  unitPrice     Float?
  requisitionId Int
  link          String?
  notes         String?
  received      Boolean?
  lineItemId    Int?
  vendorId      Int?
  lineItem      LineItem?   @relation(fields: [lineItemId], references: [id])
  requisition   Requisition @relation(fields: [requisitionId], references: [id])
  vendor        Vendor?     @relation(fields: [vendorId], references: [id])

  @@map("requisition_item")
}

model Vendor {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  isActive         Boolean           @default(true)
  requisitionItems RequisitionItem[]

  @@map("vendor")
}

model User {
  userId       String        @id @unique
  email        String        @unique
  approvals    Approval[]
  projects     Project[]
  requisitions Requisition[]

  @@map("user")
}
