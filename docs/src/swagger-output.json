{
  "swagger": "2.0",
  "info": {
    "description": "This is HexLabs' API Documentation.",
    "title": "API Reference",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "users",
      "description": "Everything about users."
    },
    {
      "name": "files",
      "description": "Everything about files."
    },
    {
      "name": "hexathons",
      "description": "Everything about hexathons."
    },
    {
      "name": "notifications",
      "description": "Everything about notifications."
    },
    {
      "name": "registration",
      "description": "Everything about registration."
    },
    {
      "name": "auth",
      "description": "Everything about auth."
    },
    {
      "name": "hardware",
      "description": "Everything about hardware."
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Create the session cookie for a user.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "idToken",
            "in": "body",
            "description": "ID Token.",
            "required": true,
            "schema": {
              "$ref": ""
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cookie policy successfully set"
          },
          "400": {
            "description": "Recent sign in is required"
          }
        }
      }
    },
    "/auth/status": {
      "get": {
        "tags": ["auth"],
        "summary": "User status.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "customToken": {
                  "type": "string",
                  "description": "Custom token for a user"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["auth"],
        "summary": "User logout.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/firebase-users": {
      "get": {
        "tags": ["auth"],
        "summary": "Finds and displays all users.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "type": "string",
            "description": "",
            "required": false
          },
          {
            "name": "pageToken",
            "in": "query",
            "type": "string",
            "description": "",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "pageSize": {
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/firebase-users/{userId}": {
      "get": {
        "tags": ["auth"],
        "summary": "Finds a user by user ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "patch": {
        "tags": ["auth"],
        "summary": "Updates existing user by ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "disabled": {
                  "type": "boolean",
                  "description": "To enable/disable a user"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "delete": {
        "tags": ["auth"],
        "summary": "Deletes a user by ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/firebase-users/email/{email}": {
      "get": {
        "tags": ["auth"],
        "summary": "Finds a user by email",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "type": "integer",
            "description": "User's email",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/permissions/{userId}": {
      "get": {
        "tags": ["auth"],
        "summary": "Get user permission info by user ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "400": {
            "description": "Empty JSON object"
          }
        }
      },
      "post": {
        "tags": ["auth"],
        "summary": "Update user permissions.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "roles": {
                  "type": "array",
                  "description": "array of roles for user",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/permissions/actions/retrieve": {
      "post": {
        "tags": ["auth"],
        "summary": "Batch get user permissions.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "array of user ids"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Permission"
              }
            }
          },
          "400": {
            "description": "Empty JSON object"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get all categories.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hardware"],
        "summary": "Create a category.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "name of category"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "patch": {
        "tags": ["hardware"],
        "summary": "Update a category.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "category id"
                },
                "name": {
                  "type": "string",
                  "description": "name of category"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/hardware-requests": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get all hardware requests.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hardware"],
        "summary": "Make a hardware request.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/hardware-requests/{id}": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get a hardware request.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Hardware request ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "delete": {
        "tags": ["hardware"],
        "summary": "Delete a hardware request.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Hardware request ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareRequest"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/items": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get all items by filter.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "type": "string",
            "description": "Item name"
          },
          {
            "name": "location",
            "in": "query",
            "type": "string",
            "description": "Item location"
          },
          {
            "name": "category",
            "in": "query",
            "type": "string",
            "description": "Item category"
          },
          {
            "name": "description",
            "in": "query",
            "type": "string",
            "description": "Item description"
          },
          {
            "name": "hidden",
            "in": "query",
            "type": "boolean",
            "description": "Item visibility"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareItem"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hardware"],
        "summary": "Create an item.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HardwareItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareItem"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get an item.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "number",
            "description": "Item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HardwareItem"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/items/amount/{id}": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get item quantity.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "number",
            "description": "Item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": ["hardware"],
        "summary": "Get all item locations.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hardware"],
        "summary": "Create an item location.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "put": {
        "tags": ["hardware"],
        "summary": "Create an item location if not already present.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/files/upload": {
      "post": {
        "tags": ["files"],
        "summary": "Upload a new file to the default bucket.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": "File successfully uploaded",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "No file uploaded"
          }
        }
      }
    },
    "/files/upload-cdn": {
      "post": {
        "tags": ["files"],
        "summary": "Upload a new file to the CDN bucket.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "description": "The file to upload"
          }
        ],
        "responses": {
          "200": {
            "description": "File successfully uploaded",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "No file uploaded"
          }
        }
      }
    },
    "/files/upload-finance": {
      "post": {
        "tags": ["files"],
        "summary": "Upload new file(s) to the finance bucket.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "files",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "The file(s) to upload (max 10)"
          }
        ],
        "responses": {
          "200": {
            "description": "File(s) successfully uploaded",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/File"
              }
            }
          },
          "400": {
            "description": "No file uploaded"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": ["files"],
        "summary": "Finds a file by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File id.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/files/{id}/view": {
      "get": {
        "tags": ["files"],
        "summary": "Finds and displays file url by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "File id.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "302": {
            "description": "Successful Operation"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/files/actions/retrieve": {
      "post": {
        "tags": ["files"],
        "summary": "Batch retrieves files by id",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "fileIds",
            "in": "body",
            "description": "File ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/File"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/hexathons": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays information of all hexathons.",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hexathon"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Create a new hexathon.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "shortCode": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "emailHeaderImage": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hexathon"
              }
            }
          },
          "400": {
            "description": "Please add all fields"
          }
        }
      }
    },
    "/hexathons/{id}": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays hexathon by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hexathon id that needs to be considered for filter.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hexathon"
              }
            }
          },
          "400": {
            "description": "Hexathon not found"
          }
        }
      },
      "put": {
        "tags": ["hexathons"],
        "summary": "Update an existing hexathon by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hexathon id.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "shortCode": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "emailHeaderImage": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hexathon"
              }
            }
          },
          "400": {
            "description": "Hexathon not found"
          }
        }
      },
      "delete": {
        "tags": ["hexathons"],
        "summary": "Deletes a hexathon by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Hexathon id that needs to be considered for filter.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Hexathon not found"
          }
        }
      }
    },
    "/hexathon-users/{hexathonId}/users": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Gets all hexathon users",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "type": "string",
            "description": "Search term"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string",
            "description": "Specifies the number of valid objects to return"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "string",
            "description": "Specifies offset in pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "count": {
                  "type": "integer"
                },
                "hexathonUsers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HexathonUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/hexathon-users/{hexathonId}/users/{userId}": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Gets a hexathon user",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id to find user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HexathonUser"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "patch": {
        "tags": ["hexathons"],
        "summary": "Updates a hexathon user",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "validAddress": {
                  "type": "string"
                },
                "trackingLabel": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HexathonUser"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/hexathon-users/{hexathonId}/users/{userId}/actions/check-valid-user": {
      "post": {
        "tags": ["hexathons"],
        "summary": "Checks if a user is valid for a hexathon",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id to find user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/hexathon-users/{hexathonId}/users/{userId}/actions/purchase-swag-item": {
      "post": {
        "tags": ["hexathons"],
        "summary": "Purchases a swag item for a selected user",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "schema": {
              "type": "object",
              "properties": {
                "swagItemId": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/hexathon-users/{hexathonId}/users/{userId}/actions/update-points": {
      "post": {
        "tags": ["hexathons"],
        "summary": "Updates points for a user",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathonId",
            "in": "path",
            "description": "hexathon id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user id to find user",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Fields to update",
            "schema": {
              "type": "object",
              "properties": {
                "numSpent": {
                  "type": "number"
                },
                "numAdditional": {
                  "type": "number"
                }
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/interactions": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays information of all interactions.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "hexathon id that needs to be considered for filter.",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User id that needs to be considered for filter.",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi"
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "Event identifier that needs to be considered for filter.",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Event type that needs to be considered for filter.",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interaction"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Create a new interaction.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "identifier": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interaction"
              }
            }
          },
          "400": {
            "description": "Interaction already exists for this user and identifier"
          }
        }
      }
    },
    "/interactions/{id}": {
      "put": {
        "tags": ["hexathons"],
        "summary": "Update an existing interaction by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Interaction id that needs to be considered for filter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "identifier": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interaction"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/blocks": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays information of all blocks.",
        "description": "The hexathon filter is required and only one of the id or slug filters can be applied",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "hexathon id that needs to be considered for filter.",
            "required": false,
            "type": "string",
            "collectionFormat": "multi"
          },
          {
            "name": "slug",
            "in": "query",
            "description": "slug that needs to be considered for filter.",
            "required": false,
            "type": "string",
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "description": "id that needs to be considered for filter.",
            "required": false,
            "type": "string",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Block"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Create a new content block.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          },
          "400": {
            "description": "Block already exists with this title for this hexathon"
          }
        }
      }
    },
    "/blocks/{id}": {
      "patch": {
        "tags": ["hexathons"],
        "summary": "Update an existing block by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Block id that needs to be considered for filter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Block"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "delete": {
        "tags": ["hexathons"],
        "summary": "Deletes a block by id",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Block id that needs to be considered for filter.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays information of all events.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "hexathon id that needs to be considered for filter.",
            "required": false,
            "type": "string",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Create a new event.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "food",
                    "workshop",
                    "ceremony",
                    "tech-talk",
                    "mini-event",
                    "important",
                    "speaker",
                    "mini-challenge"
                  ]
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "location": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interaction"
              }
            }
          },
          "400": {
            "description": "Interaction already exists for this user and identifier"
          }
        }
      }
    },
    "/events/{id}": {
      "patch": {
        "tags": ["hexathons"],
        "summary": "Update an existing interaction by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id that needs to be considered for filter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "food",
                    "workshop",
                    "ceremony",
                    "tech-talk",
                    "mini-event",
                    "important",
                    "speaker",
                    "mini-challenge"
                  ]
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "location": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Interaction"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "delete": {
        "tags": ["hexathons"],
        "summary": "Deletes an event by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event id that needs to be considered for filter.",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/swag-items": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds all swag items",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "hexathon id that needs to be considered for filter.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwagItem"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Create a new swag item.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SwagItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwagItem"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/swag-items/{id}": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Gets a swag item by id",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SwagItem"
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      },
      "put": {
        "tags": ["hexathons"],
        "summary": "Update an existing swag item by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Swag item id",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SwagItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwagItem"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "delete": {
        "tags": ["hexathons"],
        "summary": "Deletes a swag item by id",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/email/send": {
      "post": {
        "tags": ["notifications"],
        "summary": "Send an email.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "subject": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages sent",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "payload": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/email/send-personalized": {
      "post": {
        "tags": ["notifications"],
        "summary": "Send a personalized email by user data.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "subject": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages sent",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "boolean"
                  },
                  "key": {
                    "type": "string"
                  },
                  "payload": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/email/render": {
      "post": {
        "tags": ["notifications"],
        "summary": "Renders an email from the template.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rendered email",
            "schema": {
              "type": "object",
              "properties": {
                "html": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/text/send": {
      "post": {
        "tags": ["notifications"],
        "summary": "Send a text.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "numbers": {
                  "type": "array",
                  "items": {
                    "$ref": ""
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message sent"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/applications": {
      "get": {
        "tags": ["registration"],
        "summary": "Finds and displays information of all applications without data.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "Filter applications by hexathon id",
            "type": "string",
            "required": true
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter applications by status",
            "type": "string",
            "required": false
          },
          {
            "name": "applicationBranch",
            "in": "query",
            "description": "Filter applications by application branch",
            "type": "string",
            "required": false
          },
          {
            "name": "confirmationBranch",
            "in": "query",
            "description": "Filter applications by confirmation branch",
            "type": "string",
            "required": false
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter applications by user id",
            "type": "string"
          },
          {
            "name": "search",
            "in": "query",
            "type": "string",
            "description": "Search term"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string",
            "description": "Specifies the number of valid objects to return"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "string",
            "description": "Specifies offset in pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "count": {
                  "type": "integer"
                },
                "applications": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/BasicApplication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/applications/compile-extra-info": {
      "get": {
        "tags": ["registration"],
        "summary": "Compiles the extra information of all applications",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/applications/slack/confirmed-users": {
      "get": {
        "tags": ["registration"],
        "summary": "Compiles confirmed user emails for slack",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "confirmationBranch": {
                  "type": "string"
                },
                "confirmedEmails": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/applications/{id}": {
      "get": {
        "tags": ["registration"],
        "summary": "Finds and displays application by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Application id that needs to be considered for filter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "400": {
            "description": "Invalid status"
          }
        }
      }
    },
    "/applications/actions/choose-application-branch": {
      "post": {
        "tags": ["registration"],
        "summary": "Creates a new application based on the branch chosen.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "applicationBranch": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/applications/{id}/actions/save-application-data": {
      "post": {
        "tags": ["registration"],
        "summary": "Saves application data.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Application id.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "applicationData": {
                  "type": "object"
                },
                "branchType": {
                  "type": "string",
                  "enum": ["APPLICATION", "CONFIRMATION"]
                },
                "branchFormPage": {
                  "type": "number"
                },
                "validateData": {
                  "type": "boolean",
                  "description": "If true, then the data will be validated before saving."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "applicationData": {
                  "type": "object"
                },
                "applicationBranch": {
                  "$ref": "#/definitions/Branch"
                },
                "confirmationBranch": {
                  "$ref": "#/definitions/Branch"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/applications/{id}/actions/submit-application": {
      "post": {
        "tags": ["registration"],
        "summary": "Submit an application.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Application id.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "branchType": {
                  "type": "string",
                  "enum": ["APPLICATION", "CONFIRMATION"]
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/applications/{id}/actions/reset-application": {
      "post": {
        "tags": ["registration"],
        "summary": "Reset an application back to draft.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Application id.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/branches": {
      "get": {
        "tags": ["registration"],
        "summary": "Finds and displays information of all branches.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "Hexathon id that needs to be considered for filter.",
            "type": "string",
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Branch"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["registration"],
        "summary": "Create a new branch.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "open": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "close": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "jsonSchema": {
                  "type": "object",
                  "default": {}
                },
                "uiSchema": {
                  "type": "object",
                  "default": {}
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/branches/{id}": {
      "get": {
        "tags": ["registration"],
        "summary": "Find a branch by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "patch": {
        "tags": ["registration"],
        "summary": "Update an existing branch by id.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Branch id to be updated.",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "settings": {
                  "type": "object",
                  "properties": {
                    "open": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "close": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "jsonSchema": {
                  "type": "object",
                  "default": {}
                },
                "uiSchema": {
                  "type": "object",
                  "default": {}
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "tags": ["registration"],
        "summary": "Displays registration statistics.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "type": "integer",
            "description": "Hexathon ID for filter.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "userStatistics": {
                  "type": "object",
                  "properties": {
                    "totalUsers": {
                      "type": "integer"
                    },
                    "appliedUsers": {
                      "type": "integer"
                    },
                    "acceptedUsers": {
                      "type": "integer"
                    },
                    "confirmedUsers": {
                      "type": "integer"
                    },
                    "deniedUsers": {
                      "type": "integer"
                    }
                  }
                },
                "applicationStatistics": {
                  "type": "object"
                },
                "confirmationStatistics": {
                  "type": "object"
                },
                "applicationDataStatistics": {
                  "type": "object",
                  "properties": {
                    "genderData": {
                      "type": "object"
                    },
                    "schoolData": {
                      "type": "object"
                    },
                    "majorData": {
                      "type": "object"
                    },
                    "schoolYearData": {
                      "type": "object"
                    },
                    "marketingData": {
                      "type": "object"
                    },
                    "shirtSizeData": {
                      "type": "object"
                    },
                    "dietaryRestrictionsData": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/grading/actions/retrieve-question": {
      "post": {
        "tags": ["registration"],
        "summary": "Gets a question for grading",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "gradingGroup": {
                  "type": "string",
                  "enum": ["generalGroup", "emergingGroup"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "applicationId": {
                  "type": "string"
                },
                "essayId": {
                  "type": "string"
                },
                "branch": {
                  "type": "string"
                },
                "criteria": {
                  "type": "string"
                },
                "question": {
                  "type": "string"
                },
                "answer": {
                  "type": "string"
                },
                "rubricLink": {
                  "type": "string"
                },
                "gradingRubric": {
                  "type": "object"
                },
                "isCalibrationQuestion": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/grading/actions/submit-review": {
      "post": {
        "tags": ["registration"],
        "summary": "Submits a graded question",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "aplicationId": {
                  "type": "string"
                },
                "essayId": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "gradingGroup": {
                  "type": "string",
                  "enum": ["generalGroup", "emergingGroup"]
                },
                "score": {
                  "type": "integer"
                },
                "isCalibrationQuestion": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          }
        }
      }
    },
    "/grading/actions/skip-question": {
      "post": {
        "tags": ["registration"],
        "summary": "Skips a question to grade",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          }
        }
      }
    },
    "/grading/leaderboard": {
      "get": {
        "tags": ["registration"],
        "summary": "Gets the current grading leaderboard",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "Hexathon id.",
            "type": "string",
            "collectionFormat": "multi",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "currentNumGraded": {
                  "type": "integer"
                },
                "leaderboard": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "numGraded": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/grading/export": {
      "get": {
        "tags": ["registration"],
        "summary": "Exports the grading data as csv for a hexathon",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "Hexathon id.",
            "type": "string",
            "collectionFormat": "multi",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/email": {
      "get": {
        "tags": ["registration"],
        "summary": "Gets all the emails for a hexathon",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "description": "The hexathon id.",
            "type": "string",
            "collectionFormat": "multi",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Email"
              }
            }
          }
        }
      }
    },
    "/email/actions/send-emails": {
      "post": {
        "tags": ["registration"],
        "summary": "Sends email to a set of users",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "applicationBranchList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "confirmationBranchList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "statusList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/checkin": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Gets the checkin information of every user.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Checkin"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["hexathons"],
        "summary": "Checkin a new user.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Checkin"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/checkin/{id}": {
      "get": {
        "tags": ["hexathons"],
        "summary": "Finds and displays checkin by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Checkin id that needs to be considered for filter.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Checkin"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "patch": {
        "tags": ["hexathons"],
        "summary": "Update an existing checkin.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Checkin id that needs to be considered for filter.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "status",
            "in": "body",
            "description": "Status of checkin.",
            "required": true,
            "schema": {
              "$ref": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Checkin"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": ["users"],
        "summary": "Search for a company.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "type": "string",
            "description": "Search term"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string",
            "description": "Specifies the number of valid objects to return"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "string",
            "description": "Specifies offset in pagination"
          },
          {
            "name": "regex",
            "in": "query",
            "type": "string",
            "description": "Specifies if search term uses regex or not"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "count": {
                  "type": "integer"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Company"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new company.",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "defaultEmailDomains": {
                  "type": "array",
                  "items": {
                    "$ref": ""
                  },
                  "default": []
                },
                "hasResumeAccess": {
                  "type": "boolean",
                  "default": false
                },
                "employees": {
                  "type": "array",
                  "items": {
                    "$ref": ""
                  },
                  "default": []
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/companies/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Finds and displays company by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Updates an existing company by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes a company by ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Company ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/companies/employees/{employeeId}": {
      "get": {
        "tags": ["users"],
        "summary": "Finds and displays company by id.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "type": "integer",
            "description": "Employee ID",
            "required": true
          },
          {
            "name": "hexathon",
            "in": "query",
            "type": "string",
            "description": "Hexathon",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      }
    },
    "/companies/{id}/employees/accept-request": {
      "post": {
        "tags": ["users"],
        "summary": "Accepts employee join requests.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      }
    },
    "/companies/{id}/employees/add": {
      "post": {
        "tags": ["users"],
        "summary": "Adds an employee to the company.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      }
    },
    "/companies/{id}/employees/request": {
      "post": {
        "tags": ["users"],
        "summary": "Sends a request to join the company.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      }
    },
    "/companies/{id}/employees/": {
      "put": {
        "tags": ["users"],
        "summary": "Updates an employee in the company.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Company"
              }
            }
          },
          "400": {
            "description": "Company not found"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes an employee by ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Employee ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": ["users"],
        "summary": "Search for a team.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "count": {
                  "type": "integer"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Team"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a team.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "publicTeam": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Finds and displays team by team ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Team ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Team"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/add": {
      "post": {
        "tags": ["users"],
        "summary": "",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hexathon": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/{id}/accept-user": {
      "post": {
        "tags": ["users"],
        "summary": "Accepts a new user to an existing team.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Team ID",
            "required": true
          },
          {
            "name": "userId",
            "in": "body",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Profile"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/user/{userId}": {
      "get": {
        "tags": ["users"],
        "summary": "Gets the profile of a team member.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "hexathon",
            "in": "query",
            "type": "integer",
            "description": "User ID",
            "required": true
          },
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Profile"
                },
                {
                  "$ref": "#/definitions/Permission"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/join": {
      "post": {
        "tags": ["users"],
        "summary": "Submits a request to join a team.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Join Request has been sent!",
            "type": "string"
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/leave": {
      "post": {
        "tags": ["users"],
        "summary": "Submits a request to leave a team.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "hexathon": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/teams/{id}/put": {
      "put": {
        "tags": ["users"],
        "summary": "",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "params",
            "in": "params",
            "description": "",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Team ID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Search for a user profile.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "type": "string",
            "description": "Search term"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string",
            "description": "Specifies the number of valid objects to return"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "string",
            "description": "Specifies offset in pagination"
          },
          {
            "name": "regex",
            "in": "query",
            "type": "string",
            "description": "Specifies if search term uses regex or not"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                },
                "count": {
                  "type": "integer"
                },
                "profiles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Profile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a user's profile.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "type": "string"
                    },
                    "middle": {
                      "type": "string"
                    },
                    "last": {
                      "type": "string"
                    }
                  }
                },
                "phoneNumber": {
                  "type": "string"
                },
                "gender": {
                  "type": "string"
                },
                "resume": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": ["users"],
        "summary": "Finds and displays profile by user ID.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Profile"
                },
                {
                  "$ref": "#/definitions/Permission"
                }
              ]
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update a user's profile.",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/users/actions/retrieve": {
      "post": {
        "tags": ["users"],
        "summary": "Gets user profiles by list of userIds",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Profile"
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    },
    "/users/actions/retrieve-members": {
      "post": {
        "tags": ["users"],
        "summary": "Gets full user profiles of HexLabs members",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/Profile"
                  },
                  {
                    "$ref": "#/definitions/Permission"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Invalid Status"
          }
        }
      }
    }
  },
  "definitions": {
    "Checkin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "default": "NOT_CHECKED_IN"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Checkin"
      }
    },
    "File": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "storageId": {
          "type": "string"
        },
        "storageBucket": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["resume", "finance", "other"]
        }
      },
      "xml": {
        "name": "File"
      }
    },
    "Hexathon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortCode": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean",
          "default": true
        },
        "isTeamBased": {
          "type": "boolean",
          "default": true
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "emailHeaderImage": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Hexathon"
      }
    },
    "Interaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["event", "scavenger_hunt", "expo_submission"]
        },
        "identifier": {
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "enum": [
            "food",
            "workshop",
            "ceremony",
            "tech-talk",
            "mini-event",
            "important",
            "speaker",
            "mini-challenge"
          ]
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Interaction"
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "food",
            "workshop",
            "ceremony",
            "tech-talk",
            "mini-event",
            "important",
            "speaker",
            "mini-challenge"
          ]
        },
        "description": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "Event"
      }
    },
    "Block": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Block"
      }
    },
    "BasicApplication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "applicationBranch": {
          "$ref": "#/definitions/Branch"
        },
        "applicationStartTime": {
          "type": "string",
          "format": "date-time"
        },
        "applicationSubmitTime": {
          "type": "string",
          "format": "date-time"
        },
        "decisionData": {
          "type": "object",
          "properties": {
            "travelReimbursement": {
              "type": "string"
            },
            "travelReimbursementAmount": {
              "type": "number"
            },
            "travelReimbursementInfoLink": {
              "type": "string"
            }
          }
        },
        "confirmationBranch": {
          "$ref": "#/definitions/Branch"
        },
        "confirmationSubmitTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": ["DRAFT", "APPLIED", "ACCEPTED", "WAITLISTED", "CONFIRMED", "DENIED"]
        },
        "gradingComplete": {
          "type": "number"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "BasicApplication"
      }
    },
    "Application": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BasicApplication"
        },
        {
          "properties": {
            "applicationData": {
              "$ref": "#/definitions/ApplicationData"
            }
          }
        }
      ],
      "xml": {
        "name": "Application"
      }
    },
    "ApplicationData": {
      "type": "object",
      "properties": {
        "adult": {
          "type": "boolean"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "school": {
          "type": "string"
        },
        "schoolEmail": {
          "type": "string"
        },
        "schoolYear": {
          "type": "string"
        },
        "graduationYear": {
          "type": "number"
        },
        "levelOfStudy": {
          "type": "string"
        },
        "countryOfResidence": {
          "type": "string"
        },
        "major": {
          "type": "string"
        },
        "shirtSize": {
          "type": "string"
        },
        "dietaryRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allergies": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "ethnicity": {
          "type": "string"
        },
        "address": {
          "type": "object",
          "properties": {
            "line1": {
              "type": "string"
            },
            "line2": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "zip": {
              "type": "number"
            },
            "country": {
              "type": "string"
            }
          }
        },
        "marketing": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "linkedin": {
          "type": "string"
        },
        "pastExperience": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numberOfHackathons": {
          "type": "number"
        },
        "travelReimbursement": {
          "type": "string"
        },
        "extraInfo": {
          "type": "string"
        },
        "confirmChecks": {
          "type": "object"
        },
        "essays": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "criteria": {
                "type": "string"
              },
              "answer": {
                "type": "string"
              }
            }
          }
        }
      },
      "xml": {
        "name": "ApplicationData"
      }
    },
    "Branch": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["APPLICATION", "CONFIRMATION"]
        },
        "applicationGroup": {
          "type": "string",
          "enum": ["PARTICIPANT", "JUDGE", "MENTOR", "VOLUNTEER", "SPONSOR", "PARTNER", "STAFF"]
        },
        "description": {
          "type": "string"
        },
        "settings": {
          "type": "object",
          "properties": {
            "open": {
              "type": "string",
              "format": "date-time"
            },
            "closed": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "formPages": {
          "type": "array",
          "items": {
            "properties": {
              "title": {
                "type": "string"
              },
              "jsonSchema": {
                "type": "object",
                "default": {}
              },
              "uiSchema": {
                "type": "object",
                "default": {}
              }
            }
          }
        },
        "commonDefinitionsSchema": {
          "type": "string"
        },
        "secret": {
          "type": "boolean"
        },
        "automaticConfirmation": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "confirmationBranch": {
              "$ref": "#/definitions/Branch"
            },
            "emails": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "grading": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "group": {
              "type": "string",
              "enum": ["generalGroup", "emergingGroup"]
            }
          }
        }
      },
      "xml": {
        "name": "Branch"
      }
    },
    "Grader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "graded": {
          "type": "number"
        },
        "skipped": {
          "type": "number"
        },
        "calibrationScores": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "group": {
                "type": "string",
                "enum": ["generalGroup", "emergingGroup"]
              },
              "score": {
                "type": "number"
              }
            }
          }
        },
        "calibrationMapping": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "criteria": {
                "type": "string"
              },
              "scoreMappings": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "reviewerId": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "applicationId": {
          "type": "string"
        },
        "essayId": {
          "type": "string"
        },
        "score": {
          "type": "number"
        },
        "adjustedScore": {
          "type": "number"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "defaultEmailDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "hasResumeAccess": {
          "type": "boolean",
          "default": false
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "xml": {
        "name": "Company"
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "description": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "memberRequests": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          },
          "default": []
        }
      },
      "xml": {
        "name": "Team"
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "object",
          "properties": {
            "first": {
              "type": "string"
            },
            "middle": {
              "type": "string"
            },
            "last": {
              "type": "string"
            }
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "resume": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Profile"
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "roles": {
          "type": "object",
          "properties": {
            "member": {
              "type": "boolean"
            },
            "exec": {
              "type": "boolean"
            },
            "admin": {
              "type": "boolean"
            }
          }
        }
      },
      "xml": {
        "name": "Permission"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "lastSignInTime": {
              "type": "string",
              "format": "date-time"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "providerData": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "default": []
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Email": {
      "type": "object",
      "properties": {
        "hexathon": {
          "type": "string"
        },
        "filter": {
          "type": "object",
          "properties": {
            "branchList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "statusList": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "sender": {
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "HexathonUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "points": {
          "type": "object",
          "properties": {
            "currentTotal": {
              "type": "number"
            },
            "numCollected": {
              "type": "number"
            },
            "numSpent": {
              "type": "number"
            },
            "numAdditional": {
              "type": "number"
            },
            "lastUpdated": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "address": {
          "type": "string"
        },
        "validAddress": {
          "type": "boolean"
        },
        "trackingLabel": {
          "type": "string"
        },
        "purchasedSwagItems": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "swagItemId": {
                "type": "string"
              },
              "quantity": {
                "type": "number"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "profile": {
          "type": "object",
          "properties": {
            "matched": {
              "type": "boolean"
            },
            "school": {
              "type": "string"
            },
            "year": {
              "type": "string"
            },
            "major": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "commitmentLevel": {
              "type": "string",
              "enum": ["high", "medium", "low"]
            },
            "skills": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isJudging": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "SwagItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "hexathon": {
          "type": "string"
        },
        "number": {
          "type": "number"
        },
        "capacity": {
          "type": "number"
        },
        "points": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "shippable": {
          "type": "boolean"
        },
        "totalNumRequested": {
          "type": "number"
        },
        "location": {
          "type": "string"
        },
        "image_url": {
          "type": "string"
        }
      }
    },
    "Cart": {
      "type": "object",
      "properties": {
        "orderNumber": {
          "type": "number"
        },
        "items": {
          "$ref": "#/definitions/HardwareItem"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "HardwareItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "required": true
        },
        "description": {
          "type": "string",
          "required": false
        },
        "imageUrl": {
          "type": "string",
          "required": false
        },
        "totalAvailable": {
          "type": "number",
          "required": true
        },
        "maxRequestQty": {
          "type": "number",
          "required": true
        },
        "price": {
          "type": "number",
          "required": true
        },
        "hidden": {
          "type": "boolean",
          "required": true,
          "default": false
        },
        "returnRequired": {
          "type": "boolean",
          "required": true,
          "default": true
        },
        "approvalRequired": {
          "type": "boolean",
          "required": true,
          "default": true
        },
        "owner": {
          "type": "string",
          "required": true
        },
        "category": {
          "type": "string",
          "required": true
        },
        "location": {
          "type": "string",
          "required": true
        },
        "requests": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "default": []
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "required": true
        },
        "hidden": {
          "type": "boolean",
          "required": true,
          "default": false
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "required": true
        }
      }
    },
    "HardwareRequest": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "number",
          "required": true
        },
        "status": {
          "type": "string",
          "required": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "required": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "required": true
        },
        "item": {
          "type": "number",
          "required": true
        }
      }
    }
  }
}
